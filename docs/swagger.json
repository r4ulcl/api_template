{
    "schemes": [
        "http",
        "https"
    ],
    "swagger": "2.0",
    "info": {
        "description": "This is a sample API for managing administrative resources like users, servers, employees, groups, etc.",
        "title": "Admin API Documentation",
        "termsOfService": "http://yourdomain.com/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://yourdomain.com/support",
            "email": "support@yourdomain.com"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "1.0"
    },
    "basePath": "/",
    "paths": {
        "/login": {
            "get": {
                "description": "Accepts username and password as query parameters and returns a token if valid.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Authenticate user via query params (GET)",
                "responses": {
                    "200": {
                        "description": "JWT token returned",
                        "schema": {
                            "$ref": "#/definitions/models.JWTResponse"
                        }
                    },
                    "400": {
                        "description": "Missing or invalid fields",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized (invalid credentials)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Accepts JSON credentials (username + password) using PUT. Returns a JWT if valid.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Authenticate user via PUT",
                "responses": {
                    "200": {
                        "description": "JWT token returned",
                        "schema": {
                            "$ref": "#/definitions/models.JWTResponse"
                        }
                    },
                    "400": {
                        "description": "Missing or invalid fields",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized (invalid credentials)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Accepts JSON credentials (username + password) and returns a token if valid.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Authenticate a user and issue a JWT (POST)",
                "parameters": [
                    {
                        "description": "Username and password",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "JWT token returned",
                        "schema": {
                            "$ref": "#/definitions/models.JWTResponse"
                        }
                    },
                    "400": {
                        "description": "Missing or invalid fields",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized (invalid credentials)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/{resource}": {
            "get": {
                "description": "Retrieves records of a given resource, supporting complex filters, sorting, and pagination.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user",
                    "admin"
                ],
                "summary": "Get a paginated list of records",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Resource name (e.g., users, items)",
                        "name": "resource",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Page number (default is 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Items per page (default is 1000)",
                        "name": "page_size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Comma-separated sort fields, prefix with '-' for DESC",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter parameters of the form filter[field][op]=value (repeatable)",
                        "name": "filter",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Paginated list of records",
                        "schema": {
                            "$ref": "#/definitions/controllers.paginatedResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid query parameters",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Accepts either a single JSON object or an array of JSON objects for the given resource.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Create one or more records",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Resource name (e.g., users, items)",
                        "name": "resource",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "If true, for single object duplicates â†’ update instead of error",
                        "name": "overwrite",
                        "in": "query"
                    },
                    {
                        "description": "A single JSON object or an array of JSON objects matching model schema",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The created record, or list of created records",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "400": {
                        "description": "Bad request (invalid JSON or missing fields)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict (duplicate key and overwrite=false) for single object",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/{resource}/{id}": {
            "get": {
                "description": "Fetches a single resource by its ID (supports composite keys via hyphen-separated format).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user",
                    "admin"
                ],
                "summary": "Get a record by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Resource name (e.g., users, items)",
                        "name": "resource",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Primary key (or hyphen-separated composite key)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The requested record",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "404": {
                        "description": "Record not found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Accepts a JSON payload to update an existing resource. The `id` in the path is used to locate the record.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Update a record",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Resource name (e.g., users, items)",
                        "name": "resource",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Primary key (or hyphen-separated composite key)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "JSON object with fields to update (non-zero fields will be updated)",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The updated record",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "400": {
                        "description": "Invalid input JSON",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Record not found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes a resource identified by its primary key (or hyphen-separated composite key).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Delete a record",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Resource name (e.g., users, items)",
                        "name": "resource",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Primary key (or hyphen-separated composite key)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success message",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Record not found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "controllers.paginatedResponse": {
            "type": "object",
            "properties": {
                "data": {},
                "links": {
                    "$ref": "#/definitions/controllers.paginationLinks"
                },
                "meta": {
                    "$ref": "#/definitions/controllers.paginationMeta"
                }
            }
        },
        "controllers.paginationLinks": {
            "type": "object",
            "properties": {
                "first": {
                    "type": "string"
                },
                "last": {
                    "type": "string"
                },
                "next": {
                    "type": "string"
                },
                "prev": {
                    "type": "string"
                },
                "self": {
                    "type": "string"
                }
            }
        },
        "controllers.paginationMeta": {
            "type": "object",
            "properties": {
                "current_page": {
                    "type": "integer"
                },
                "page_size": {
                    "type": "integer"
                },
                "total_items": {
                    "type": "integer"
                },
                "total_pages": {
                    "type": "integer"
                }
            }
        },
        "models.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "description": "Error contains a descriptive error message.",
                    "type": "string"
                }
            }
        },
        "models.JWTResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "description": "Token is the JWT token assigned to the authenticated user.",
                    "type": "string"
                }
            }
        },
        "models.LoginRequest": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "description": "Password is the user's password used for authentication.",
                    "type": "string"
                },
                "username": {
                    "description": "Username is the unique identifier for the user attempting to log in.",
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "description": "JWT to login",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    },
    "security": [
        {
            "ApiKeyAuth": []
        }
    ]
}