{
    "schemes": [
        "http",
        "https"
    ],
    "swagger": "2.0",
    "info": {
        "description": "This is a sample API for managing administrative resources like users, servers, employees, groups, etc.",
        "title": "Admin API Documentation",
        "termsOfService": "http://yourdomain.com/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://yourdomain.com/support",
            "email": "support@yourdomain.com"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "1.0"
    },
    "basePath": "/",
    "paths": {
        "/{resource}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "If “resource=user”, GET /user returns all users (paginated \u0026 filterable). DELETE /{resource}/{id} deletes the specified item.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Admin: list users or delete a resource by ID",
                "parameters": [
                    {
                        "enum": [
                            "user",
                            "example1",
                            "example2",
                            "exampleRelational"
                        ],
                        "type": "string",
                        "description": "Resource type",
                        "name": "resource",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "For GET /user: array of users; for DELETE: { message: \\\"Deleted successfully\\\" }",
                        "schema": {}
                    },
                    "400": {
                        "description": "Invalid resource",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden: Admins only",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Allows admin to create (POST), overwrite (PUT), or update (PATCH) any resource.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Admin: create/overwrite or update a resource",
                "parameters": [
                    {
                        "enum": [
                            "user",
                            "example1",
                            "example2",
                            "exampleRelational"
                        ],
                        "type": "string",
                        "description": "Resource type",
                        "name": "resource",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Generic request body for POST/PATCH",
                        "name": "defaultRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.DefaultRequest"
                        }
                    },
                    {
                        "description": "Example1 object to create/overwrite",
                        "name": "example1",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/models.Example1"
                        }
                    },
                    {
                        "description": "Example2 object to create/overwrite",
                        "name": "example2",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/models.Example2"
                        }
                    },
                    {
                        "description": "ExampleRelational to create/overwrite",
                        "name": "ExampleRelational",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/models.ExampleRelational"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Returns the created/updated object",
                        "schema": {}
                    },
                    "400": {
                        "description": "Invalid input JSON",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden: Admins only",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Allows admin to create (POST), overwrite (PUT), or update (PATCH) any resource.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Admin: create/overwrite or update a resource",
                "parameters": [
                    {
                        "enum": [
                            "user",
                            "example1",
                            "example2",
                            "exampleRelational"
                        ],
                        "type": "string",
                        "description": "Resource type",
                        "name": "resource",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Generic request body for POST/PATCH",
                        "name": "defaultRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.DefaultRequest"
                        }
                    },
                    {
                        "description": "Example1 object to create/overwrite",
                        "name": "example1",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/models.Example1"
                        }
                    },
                    {
                        "description": "Example2 object to create/overwrite",
                        "name": "example2",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/models.Example2"
                        }
                    },
                    {
                        "description": "ExampleRelational to create/overwrite",
                        "name": "ExampleRelational",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/models.ExampleRelational"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Returns the created/updated object",
                        "schema": {}
                    },
                    "400": {
                        "description": "Invalid input JSON",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden: Admins only",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/{resource}/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns a paginated list of items for the given resource, applying any query-string filters (e.g., ?status=active\u0026category=books). To fetch a single item, include “/{id}”.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "resources"
                ],
                "summary": "Retrieve resources (paginated \u0026 filterable) or a single resource by ID",
                "parameters": [
                    {
                        "enum": [
                            "example1",
                            "example2",
                            "exampleRelational"
                        ],
                        "type": "string",
                        "description": "Resource type",
                        "name": "resource",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Resource ID (when fetching a single item)",
                        "name": "id",
                        "in": "path"
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number (default: 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Number of items per page (default: 10)",
                        "name": "per_page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Any other key=value acts as a filter (e.g., ?status=active). Multiple filters allowed.",
                        "name": "*",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns { data: [...], meta: {...}, links: {...} }",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "If “resource=user”, GET /user returns all users (paginated \u0026 filterable). DELETE /{resource}/{id} deletes the specified item.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Admin: list users or delete a resource by ID",
                "parameters": [
                    {
                        "enum": [
                            "user",
                            "example1",
                            "example2",
                            "exampleRelational"
                        ],
                        "type": "string",
                        "description": "Resource type",
                        "name": "resource",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Resource ID (for delete operations)",
                        "name": "id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "For GET /user: array of users; for DELETE: { message: \\\"Deleted successfully\\\" }",
                        "schema": {}
                    },
                    "400": {
                        "description": "Invalid resource",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden: Admins only",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Allows admin to create (POST), overwrite (PUT), or update (PATCH) any resource.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Admin: create/overwrite or update a resource",
                "parameters": [
                    {
                        "enum": [
                            "user",
                            "example1",
                            "example2",
                            "exampleRelational"
                        ],
                        "type": "string",
                        "description": "Resource type",
                        "name": "resource",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Resource ID (for PATCH)",
                        "name": "id",
                        "in": "path"
                    },
                    {
                        "description": "Generic request body for POST/PATCH",
                        "name": "defaultRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.DefaultRequest"
                        }
                    },
                    {
                        "description": "Example1 object to create/overwrite",
                        "name": "example1",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/models.Example1"
                        }
                    },
                    {
                        "description": "Example2 object to create/overwrite",
                        "name": "example2",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/models.Example2"
                        }
                    },
                    {
                        "description": "ExampleRelational to create/overwrite",
                        "name": "ExampleRelational",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/models.ExampleRelational"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Returns the created/updated object",
                        "schema": {}
                    },
                    "400": {
                        "description": "Invalid input JSON",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden: Admins only",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.DefaultRequest": {
            "type": "object",
            "properties": {
                "field": {
                    "description": "Field is a placeholder for data that might be required in some requests.",
                    "type": "string"
                }
            }
        },
        "models.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "description": "Error contains a descriptive error message.",
                    "type": "string"
                }
            }
        },
        "models.Example1": {
            "type": "object",
            "properties": {
                "field1": {
                    "description": "Field1 is the primary key of the Example1 table.",
                    "type": "string"
                },
                "field2": {
                    "description": "Field2 stores additional data related to Example1.",
                    "type": "string"
                }
            }
        },
        "models.Example2": {
            "type": "object",
            "properties": {
                "field1": {
                    "type": "string"
                },
                "field2": {
                    "type": "string"
                }
            }
        },
        "models.ExampleRelational": {
            "type": "object",
            "properties": {
                "example1Reference": {
                    "description": "Example1Reference establishes a foreign key relationship with Example1.\nUpdates and deletions on Example1 cascade to ExampleRelational.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.Example1"
                        }
                    ]
                },
                "example1_field1": {
                    "description": "Example1Field1 is a foreign key referencing Example1.",
                    "type": "string"
                },
                "example2Reference": {
                    "description": "Example2Reference establishes a foreign key relationship with Example2.\nUpdates and deletions on Example2 cascade to ExampleRelational.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.Example2"
                        }
                    ]
                },
                "example2_field1": {
                    "description": "Example2Field1 is a foreign key referencing Example2.",
                    "type": "string"
                },
                "field3": {
                    "description": "Field3 stores additional relationship-related information.",
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "description": "JWT to login",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    },
    "security": [
        {
            "ApiKeyAuth": []
        }
    ]
}