basePath: /
definitions:
  models.DefaultRequest:
    properties:
      field:
        description: Field is a placeholder for data that might be required in some
          requests.
        type: string
    type: object
  models.ErrorResponse:
    properties:
      error:
        description: Error contains a descriptive error message.
        type: string
    type: object
  models.Example1:
    properties:
      field1:
        description: Field1 is the primary key of the Example1 table.
        type: string
      field2:
        description: Field2 stores additional data related to Example1.
        type: string
    type: object
  models.Example2:
    properties:
      field1:
        type: string
      field2:
        type: string
    type: object
  models.ExampleRelational:
    properties:
      example1_field1:
        description: Example1Field1 is a foreign key referencing Example1.
        type: string
      example1Reference:
        allOf:
        - $ref: '#/definitions/models.Example1'
        description: |-
          Example1Reference establishes a foreign key relationship with Example1.
          Updates and deletions on Example1 cascade to ExampleRelational.
      example2_field1:
        description: Example2Field1 is a foreign key referencing Example2.
        type: string
      example2Reference:
        allOf:
        - $ref: '#/definitions/models.Example2'
        description: |-
          Example2Reference establishes a foreign key relationship with Example2.
          Updates and deletions on Example2 cascade to ExampleRelational.
      field3:
        description: Field3 stores additional relationship-related information.
        type: string
    type: object
info:
  contact:
    email: support@yourdomain.com
    name: API Support
    url: http://yourdomain.com/support
  description: This is a sample API for managing administrative resources like users,
    servers, employees, groups, etc.
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://yourdomain.com/terms/
  title: Admin API Documentation
  version: "1.0"
paths:
  /{resource}:
    get:
      description: If “resource=user”, GET /user returns all users (paginated & filterable).
        DELETE /{resource}/{id} deletes the specified item.
      parameters:
      - description: Resource type
        enum:
        - user
        - example1
        - example2
        - exampleRelational
        in: path
        name: resource
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'For GET /user: array of users; for DELETE: { message: \"Deleted
            successfully\" }'
          schema: {}
        "400":
          description: Invalid resource
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: 'Forbidden: Admins only'
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: 'Admin: list users or delete a resource by ID'
      tags:
      - admin
    post:
      consumes:
      - application/json
      description: Allows admin to create (POST), overwrite (PUT), or update (PATCH)
        any resource.
      parameters:
      - description: Resource type
        enum:
        - user
        - example1
        - example2
        - exampleRelational
        in: path
        name: resource
        required: true
        type: string
      - description: Generic request body for POST/PATCH
        in: body
        name: defaultRequest
        required: true
        schema:
          $ref: '#/definitions/models.DefaultRequest'
      - description: Example1 object to create/overwrite
        in: body
        name: example1
        schema:
          $ref: '#/definitions/models.Example1'
      - description: Example2 object to create/overwrite
        in: body
        name: example2
        schema:
          $ref: '#/definitions/models.Example2'
      - description: ExampleRelational to create/overwrite
        in: body
        name: ExampleRelational
        schema:
          $ref: '#/definitions/models.ExampleRelational'
      produces:
      - application/json
      responses:
        "201":
          description: Returns the created/updated object
          schema: {}
        "400":
          description: Invalid input JSON
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: 'Forbidden: Admins only'
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: 'Admin: create/overwrite or update a resource'
      tags:
      - admin
    put:
      consumes:
      - application/json
      description: Allows admin to create (POST), overwrite (PUT), or update (PATCH)
        any resource.
      parameters:
      - description: Resource type
        enum:
        - user
        - example1
        - example2
        - exampleRelational
        in: path
        name: resource
        required: true
        type: string
      - description: Generic request body for POST/PATCH
        in: body
        name: defaultRequest
        required: true
        schema:
          $ref: '#/definitions/models.DefaultRequest'
      - description: Example1 object to create/overwrite
        in: body
        name: example1
        schema:
          $ref: '#/definitions/models.Example1'
      - description: Example2 object to create/overwrite
        in: body
        name: example2
        schema:
          $ref: '#/definitions/models.Example2'
      - description: ExampleRelational to create/overwrite
        in: body
        name: ExampleRelational
        schema:
          $ref: '#/definitions/models.ExampleRelational'
      produces:
      - application/json
      responses:
        "201":
          description: Returns the created/updated object
          schema: {}
        "400":
          description: Invalid input JSON
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: 'Forbidden: Admins only'
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: 'Admin: create/overwrite or update a resource'
      tags:
      - admin
  /{resource}/{id}:
    delete:
      description: If “resource=user”, GET /user returns all users (paginated & filterable).
        DELETE /{resource}/{id} deletes the specified item.
      parameters:
      - description: Resource type
        enum:
        - user
        - example1
        - example2
        - exampleRelational
        in: path
        name: resource
        required: true
        type: string
      - description: Resource ID (for delete operations)
        in: path
        name: id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'For GET /user: array of users; for DELETE: { message: \"Deleted
            successfully\" }'
          schema: {}
        "400":
          description: Invalid resource
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: 'Forbidden: Admins only'
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: 'Admin: list users or delete a resource by ID'
      tags:
      - admin
    get:
      description: Returns a paginated list of items for the given resource, applying
        any query-string filters (e.g., ?status=active&category=books). To fetch a
        single item, include “/{id}”.
      parameters:
      - description: Resource type
        enum:
        - example1
        - example2
        - exampleRelational
        in: path
        name: resource
        required: true
        type: string
      - description: Resource ID (when fetching a single item)
        in: path
        name: id
        type: string
      - default: 1
        description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - default: 10
        description: 'Number of items per page (default: 10)'
        in: query
        name: per_page
        type: integer
      - description: Any other key=value acts as a filter (e.g., ?status=active).
          Multiple filters allowed.
        in: query
        name: '*'
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'Returns { data: [...], meta: {...}, links: {...} }'
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Retrieve resources (paginated & filterable) or a single resource by
        ID
      tags:
      - resources
    patch:
      consumes:
      - application/json
      description: Allows admin to create (POST), overwrite (PUT), or update (PATCH)
        any resource.
      parameters:
      - description: Resource type
        enum:
        - user
        - example1
        - example2
        - exampleRelational
        in: path
        name: resource
        required: true
        type: string
      - description: Resource ID (for PATCH)
        in: path
        name: id
        type: string
      - description: Generic request body for POST/PATCH
        in: body
        name: defaultRequest
        required: true
        schema:
          $ref: '#/definitions/models.DefaultRequest'
      - description: Example1 object to create/overwrite
        in: body
        name: example1
        schema:
          $ref: '#/definitions/models.Example1'
      - description: Example2 object to create/overwrite
        in: body
        name: example2
        schema:
          $ref: '#/definitions/models.Example2'
      - description: ExampleRelational to create/overwrite
        in: body
        name: ExampleRelational
        schema:
          $ref: '#/definitions/models.ExampleRelational'
      produces:
      - application/json
      responses:
        "201":
          description: Returns the created/updated object
          schema: {}
        "400":
          description: Invalid input JSON
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: 'Forbidden: Admins only'
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: 'Admin: create/overwrite or update a resource'
      tags:
      - admin
schemes:
- http
- https
security:
- ApiKeyAuth: []
securityDefinitions:
  ApiKeyAuth:
    description: JWT to login
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
