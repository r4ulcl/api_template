basePath: /
definitions:
  controllers.paginatedResponse:
    properties:
      data: {}
      links:
        $ref: '#/definitions/controllers.paginationLinks'
      meta:
        $ref: '#/definitions/controllers.paginationMeta'
    type: object
  controllers.paginationLinks:
    properties:
      first:
        type: string
      last:
        type: string
      next:
        type: string
      prev:
        type: string
      self:
        type: string
    type: object
  controllers.paginationMeta:
    properties:
      current_page:
        type: integer
      page_size:
        type: integer
      total_items:
        type: integer
      total_pages:
        type: integer
    type: object
  models.ErrorResponse:
    properties:
      error:
        description: Error contains a descriptive error message.
        type: string
    type: object
  models.JWTResponse:
    properties:
      token:
        description: Token is the JWT token assigned to the authenticated user.
        type: string
    type: object
  models.LoginRequest:
    properties:
      password:
        description: Password is the user's password used for authentication.
        type: string
      username:
        description: Username is the unique identifier for the user attempting to
          log in.
        type: string
    required:
    - password
    - username
    type: object
info:
  contact:
    email: support@yourdomain.com
    name: API Support
    url: http://yourdomain.com/support
  description: This is a sample API for managing administrative resources like users,
    servers, employees, groups, etc.
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://yourdomain.com/terms/
  title: Admin API Documentation
  version: "1.0"
paths:
  /{resource}:
    get:
      consumes:
      - application/json
      description: Retrieves records of a given resource, supporting complex filters,
        sorting, and pagination.
      parameters:
      - description: Resource name (e.g., users, items)
        in: path
        name: resource
        required: true
        type: string
      - description: Page number (default is 1)
        in: query
        name: page
        type: integer
      - description: Items per page (default is 1000)
        in: query
        name: page_size
        type: integer
      - description: Comma-separated sort fields, prefix with '-' for DESC
        in: query
        name: sort
        type: string
      - description: Filter parameters of the form filter[field][op]=value (repeatable)
        in: query
        name: filter
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Paginated list of records
          schema:
            $ref: '#/definitions/controllers.paginatedResponse'
        "400":
          description: Invalid query parameters
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get a paginated list of records
      tags:
      - user
      - admin
    post:
      consumes:
      - application/json
      description: Accepts either a single JSON object or an array of JSON objects
        for the given resource.
      parameters:
      - description: Resource name (e.g., users, items)
        in: path
        name: resource
        required: true
        type: string
      - description: If true, for single object duplicates â†’ update instead of error
        in: query
        name: overwrite
        type: boolean
      - description: A single JSON object or an array of JSON objects matching model
          schema
        in: body
        name: payload
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "201":
          description: The created record, or list of created records
          schema:
            type: object
        "400":
          description: Bad request (invalid JSON or missing fields)
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "409":
          description: Conflict (duplicate key and overwrite=false) for single object
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Create one or more records
      tags:
      - admin
  /{resource}/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a resource identified by its primary key (or hyphen-separated
        composite key).
      parameters:
      - description: Resource name (e.g., users, items)
        in: path
        name: resource
        required: true
        type: string
      - description: Primary key (or hyphen-separated composite key)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success message
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Record not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Delete a record
      tags:
      - admin
    get:
      consumes:
      - application/json
      description: Fetches a single resource by its ID (supports composite keys via
        hyphen-separated format).
      parameters:
      - description: Resource name (e.g., users, items)
        in: path
        name: resource
        required: true
        type: string
      - description: Primary key (or hyphen-separated composite key)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: The requested record
          schema:
            type: object
        "404":
          description: Record not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get a record by ID
      tags:
      - user
      - admin
    put:
      consumes:
      - application/json
      description: Accepts a JSON payload to update an existing resource. The `id`
        in the path is used to locate the record.
      parameters:
      - description: Resource name (e.g., users, items)
        in: path
        name: resource
        required: true
        type: string
      - description: Primary key (or hyphen-separated composite key)
        in: path
        name: id
        required: true
        type: string
      - description: JSON object with fields to update (non-zero fields will be updated)
        in: body
        name: payload
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: The updated record
          schema:
            type: object
        "400":
          description: Invalid input JSON
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Record not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Update a record
      tags:
      - admin
  /login:
    get:
      consumes:
      - application/json
      description: Accepts username and password as query parameters and returns a
        token if valid.
      produces:
      - application/json
      responses:
        "200":
          description: JWT token returned
          schema:
            $ref: '#/definitions/models.JWTResponse'
        "400":
          description: Missing or invalid fields
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized (invalid credentials)
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Authenticate user via query params (GET)
      tags:
      - auth
    post:
      consumes:
      - application/json
      description: Accepts JSON credentials (username + password) and returns a token
        if valid.
      parameters:
      - description: Username and password
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: JWT token returned
          schema:
            $ref: '#/definitions/models.JWTResponse'
        "400":
          description: Missing or invalid fields
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized (invalid credentials)
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Authenticate a user and issue a JWT (POST)
      tags:
      - auth
    put:
      consumes:
      - application/json
      description: Accepts JSON credentials (username + password) using PUT. Returns
        a JWT if valid.
      produces:
      - application/json
      responses:
        "200":
          description: JWT token returned
          schema:
            $ref: '#/definitions/models.JWTResponse'
        "400":
          description: Missing or invalid fields
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized (invalid credentials)
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Authenticate user via PUT
      tags:
      - auth
schemes:
- http
- https
security:
- ApiKeyAuth: []
securityDefinitions:
  ApiKeyAuth:
    description: JWT to login
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
